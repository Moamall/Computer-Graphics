import pygame as p
import numpy as np
w = 440
h = 500

p.init() #start the game

window = p.display.set_mode((w,h))
p.display.set_caption("Our Game")

x = 170
y = 490


class enemy():
    def __init__(self,x,y,w,h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h

    def draw(self):
        p.draw.rect(window, (255, 0, 0), [self.x, self.y, self.w,self.h])
        p.draw.rect(window, (255, 0, 0), [70,50, self.w, self.h])
        p.draw.rect(window, (255,100, 150), [0, 50, 20, 20])
        p.draw.rect(window, (255, 255, 0), [20, 50, self.w, self.h])
        p.draw.rect(window, (255, 255, 0), [120, 50, self.w, self.h])
        p.draw.rect(window, (0, 0, 0), [220, 50, self.w, self.h])
        p.draw.rect(window, (255, 200, 255), [270, 50, self.w, self.h])
        p.draw.rect(window, (200, 200, 255), [320, 50, self.w, self.h])
        p.draw.rect(window, (0, 200, 190), [370, 50, self.w, self.h])
        p.draw.rect(window, (255, 0,255), [420, 50, 20, 20])

        p.draw.rect(window, (255, 0, 0), [0,30, 20, 20])
        p.draw.rect(window, (100, 100, 100), [20, 30, self.w, self.h])
        p.draw.rect(window, (255, 100, 150), [70, 30,self.w, self.h ])
        p.draw.rect(window, (255, 215, 100), [120, 30, self.w, self.h])
        p.draw.rect(window, (255, 90, 100), [170, 30, self.w, self.h])
        p.draw.rect(window, (0, 0, 100), [220, 30, self.w, self.h])
        p.draw.rect(window, (255, 200, 25), [270, 30, self.w, self.h])
        p.draw.rect(window, (200, 100, 255), [320, 30, self.w, self.h])
        p.draw.rect(window, (0, 45, 190), [370, 30, self.w, self.h])
        p.draw.rect(window, (105, 0, 105), [420, 30, 20, 20])

        p.draw.rect(window, (255, 110, 110), [0,0, 20, 20])
        p.draw.rect(window, (100, 100, 0), [20, 0, self.w, self.h])
        p.draw.rect(window, (255, 0, 150), [70, 0, self.w, self.h])
        p.draw.rect(window, (100, 215, 90), [120, 0, self.w, self.h])
        p.draw.rect(window, (200, 90, 110), [170, 0, self.w, self.h])
        p.draw.rect(window, (180, 170, 100), [220, 0, self.w, self.h])
        p.draw.rect(window, (255, 220, 145), [270, 0, self.w, self.h])
        p.draw.rect(window, (200, 100, 255), [320, 0, self.w, self.h])
        p.draw.rect(window, (130, 145, 140), [370, 0, self.w, self.h])
        p.draw.rect(window, (50, 150, 105), [420, 0, 20, 20])
        p.draw.rect(window, (0, 0, 0), [0, 20, 440, 10])

    def col(self,other):
        if(self.x < other.x and self.x + 50 > other.x and self.y + 50> other.y and self.y < other.y +50):
            return True
        else:
            return False


class bullet():
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def draw(self):
        p.draw.ellipse(window,(255,0,0),[self.x,self.y,10,10])


    def fire(self):
        self.y -= 2

o = []

e =[]
e.append(enemy(170,50,50,20))

gameStart = False

while not gameStart:
    for event in p.event.get():
        if event.type == p.QUIT:
            gameStart = True
            p.quit()
            quit()

        if event.type == p.KEYDOWN:
            if event.key == p.K_DOWN:
                o.append(bullet(x + 18, y))


    window.fill((255, 255, 255))  # background color

    keys = p.key.get_pressed()

    if keys[p.K_LEFT]:
        x -= .5

    if keys[p.K_RIGHT]:
        x += .5

    for i in range(0, len(o)):
        o[i].fire()
        o[i].draw()

    p.draw.rect(window, (255, 50, 150), [x, y, 50, 10])
    for j in range(0, len(e)):
        e[j].draw()

    for i in range(0, len(o)):
        for j in range(0,len(e)):
            if e[j].col(o[i]):
                del e[j]



    p.display.update()

